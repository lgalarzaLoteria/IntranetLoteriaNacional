@page "/StoreCheck/RankingPDS"

@using System.Drawing
@using Blazored.LocalStorage
@using IntranetLoteriaNacional.Data
@using IntranetLoteriaNacional.Shared.ComponentModels
@using IntranetLoteriaNacional.Shared.Modals
@using IntranetLoteriaNacional.Shared.Constants
@using IntranetLoteriaNacional.Validate
@using LoteriaNacionalDominio
@* @using Syncfusion.Blazor.Charts *@
@using C1.Chart
@using C1.Blazor.Chart
@using static LoteriaNacionalDominio.StoreCheckDTO
@using static LoteriaNacionalDominio.SeguridadDTO

@inject ProjectHttpClient _httpClient
@inject ILocalStorageService _session
@inject NavigationManager _navigation
@inject SweetAlertService Swal
@inject StoreCheckService StoreService

<style>
    .column {
        width: 50%;
    }

    /* Clear floats after the columns */
    .row:after {
        content: "";
        display: table;
        clear: both;
    }
</style>
<article class="art">
    <h1 class="tituloPagina">Dashboard Store Check</h1>
    <div>
        <PhTable @ref="_table" TPost="LoginDTO" isSearcheable="false" TReturn="ZonasPorSupervisorDTO" Body="@login" EndPoint="@EndPointStr" isAgroup=true idTable="table_ZonasPorSupervisor">
            <PhTableColumnHeaders>
                <PhTableColumn Style="width:20%;" Value="Zona" IsHeader="true" />
                <PhTableColumn Style="width:20%;" Value="Jefe Comercial" IsHeader="true" />
                <PhTableColumn Style="width:20%;" Value="Supervisor" IsHeader="true" />
                <PhTableColumn Style="width:30%;" Value="PDS" IsHeader="true" />
                <PhTableColumn Style="width:20%;" Value="Cuestionarios Revisados" IsHeader="true" />
            </PhTableColumnHeaders>
            <PhTableColumnValues>
                <PhTableColumn Value="@context.nombreZona" Style="width:20%;text-align:center;vertical-align:middle;" />
                <PhTableColumn Value="@context.nombreJefeComercial" Style="width:20%;" />
                <PhTableColumn Value="@context.nombreSupervisor" Style="width:20%;" />
                <PhTableColumn Value="@context.nombrePDS" Style="width:30%;" />
                <PhTableColumn Value="@Convert.ToString(context.CuestionariosPendientes)" Style="width:20%;" />
            </PhTableColumnValues>
            @* <PhTableActions>
                <PhButton Type="ButtonType.Primary" @onclick="@(() => VerCuestionarios(context))" Size="ButtonSize.Small" Text="Cuestionarios" />
            </PhTableActions> *@
        </PhTable>
        <div class="row">
            <br />
        </div>
        <div class="row">
            <div class="col-md-6 col-sm-12">
                <FlexChart Class="chart" ChartType="C1.Chart.ChartType.Funnel" BindingX="cantidadPDS" ItemsSource="ranking"
                           HeaderContent="Ranking Cumplimiento PDS (últimos 30 días)" HeaderStyle="font-size:15px" LegendPosition="C1.Chart.Position.None">
                    <SeriesCollection>
                        <Series Binding="grupo"></Series>
                    </SeriesCollection>
                    <AxisCollection>
                        <Axis AxisType="C1.Chart.AxisType.Y" Position="C1.Chart.Position.None" />
                        <Axis AxisType="C1.Chart.AxisType.X" Position="C1.Chart.Position.None" />
                    </AxisCollection>
                    <Label>
                        <DataLabel Position="C1.Chart.LabelPosition.Center" Content="{grupo}% - PDS: {cantidadPDS}"></DataLabel>
                    </Label>
                </FlexChart>
            </div>
            <div class="col-md-6 col-sm-12">
                <FlexChart Class="chart" ChartType="C1.Chart.ChartType.Column" Stacking="Stacking.None" Palette="Palette.Standard"
                           HeaderContent="Revisión de cuestionarios" HeaderStyle="font-size:15px"
                           LegendPosition="Position.Bottom" LegendStyle="font-size:15px"
                           BindingX="nombreUsuario" ItemsSource="dataTiempoRevision">
                    <SeriesCollection>
                        <Series Name="A Tiempo" Binding="revisadosATiempo" />
                        <Series Name="Retrasados" Binding="revisadosConAtraso" />
                    </SeriesCollection>
                </FlexChart>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6 col-sm-12" style="text-indent: 298px;">
                <PhButton Type="ButtonType.Primary" OnClick="VerRanking" Size="ButtonSize.Medium" Text="Ver Ranking" />
                <PhModal @ref="modalRankingxPDS">
                    <Title>Ranking de Cumplimento de PDS</Title>
                     <Body>
                        <PhTable @ref="_tableRankingPDS" TPost="RegistroFormularioDTO" isSearcheable="false" isAgroup="true" TReturn="RankingCumplimientoPDSInfo" Body="@rankingPDS" EndPoint="@EndPointObtieneRanking" idTable="table_RankingPDS">
                            <PhTableColumnHeaders>
                                <PhTableColumn Style="width:30%;" Value="% Cumplimiento" IsHeader="true" />
                                <PhTableColumn Style="width:20%;" Value="Cantidad PDS" IsHeader="true" />
                            </PhTableColumnHeaders>
                            <PhTableColumnValues>
                                <PhTableColumn Value="@Convert.ToString(context.grupo)" Style="width:30%;text-align:center;vertical-align:middle;" />
                                <PhTableColumn Value="@Convert.ToString(context.cantidadPDS)" Style="width:20%;" />
                            </PhTableColumnValues>
                            <PhTableActions>
                                <PhButton Type="ButtonType.Primary" @onclick="@(() => VerRankingxGrupo(context))" Size="ButtonSize.Small" Text="Ver PDS" />
                            </PhTableActions>
                        </PhTable>
                        <PhModal @ref="modalPdsRango">
                            <Title>PDS por Rango de Cumplimiento</Title>
                            <Body>
                                <PhTable @ref="_tablePDS1" TPost="RankingCumplimientoPDSInfo" isSearcheable="false" isRefresh="false" TReturn="RankingPDSInfo" Body="@pdsRango" EndPoint="@EndPointPDSPorRango">
                                    <PhTableColumnHeaders>
                                        <PhTableColumn Style="width:20%;" Value="PDS" IsHeader="true" />
                                        <PhTableColumn Style="width:20%;" Value="Porcentaje de Cumplimiento" IsHeader="true" />
                                    </PhTableColumnHeaders>
                                    <PhTableColumnValues>
                                        <PhTableColumn Value="@context.nombrePDS" Style="width:20%;" />
                                        <PhTableColumn Value="@context.porcentajeCumplimiento.ToString()" Style="width:20%;" />
                                    </PhTableColumnValues>
                                </PhTable>
                            </Body>
                            <Footer>
                                <PhButton Type="ButtonType.Danger" @onclick="() => modalPdsRango.CloseModal()" Size="ButtonSize.Small" Text="Cerrar" />
                            </Footer>
                        </PhModal>
                     </Body>
                    <Footer>
                        <PhButton Type="ButtonType.Danger" @onclick="() => modalRankingxPDS.CloseModal()" Size="ButtonSize.Small" Text="Cerrar" />
                    </Footer>
                </PhModal>
            </div>
        </div>
    </div>
    <Loading @ref="loader"></Loading>
</article>


@code {
    Loading loader { get; set; } = new();
    private PhTable<LoginDTO, ZonasPorSupervisorDTO>? _table = new();
    private string EndPointStr { get; set; } = null!;
    private string EndPointCuestionarios { get; set; } = null!;
    private string EndPointPDSPorRango { get; set; } = null!;
    private string EndPointObtieneRanking { get; set; } = null!;
    private List<RankingCumplimientoPDSInfo>? ranking;
    private List<RankingPDSInfo>? resumenFormulariosPDS;
    private List<TiempoRevisionDTO>? dataTiempoRevision;
    private List<CalificacionCuestionariosPDSDTO>? pdsPorRango;
    private PhModal? modalRankingxPDS { get; set; } = new();
    private PhModal? modalPdsRango { get; set; } = new();
    private PhModal? modalResumen { get; set; } = new();
    private PhModal? modalCuestionarios { get; set; } = new();
    LoginDTO login { get; set; } = null!;
    RegistroFormularioDTO rankingPDS { get; set; } = null!;
    RankingCumplimientoPDSInfo pdsRango { get; set; } = null!;
    private int codigoPDS { get; set; } = 0;
    private string nombrePDS = string.Empty;
    private string rangoCumplimientoPDS = string.Empty;
    private string tituloResumenFormulariosPDS = string.Empty; 
    private PhTable<RankingPDSInfo, RankingPDSInfo>? _tablePDS = new();
    private PhTable<RankingCumplimientoPDSInfo, RankingPDSInfo>? _tablePDS1 = new();
    private PhTable<RankingPDSInfo, RankingPDSInfo>? _table1 = new();
    private PhTable<RegistroFormularioDTO, RankingCumplimientoPDSInfo>? _tableRankingPDS = new();
    private PhTable<CalificacionCuestionariosPDSDTO, CalificacionCuestionariosPDSDTO>? _table2 = new();
    private RankingPDSInfo cuestionario;
    RankingPDSInfo pds { get; set; } = null!;
    CalificacionCuestionariosPDSDTO pds1 { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var item = await _session.GetItemAsync<MenuDTO[]>("_userMenu");
            Validate validate = new Validate();
            if (!validate.isValid("./StoreCheck/RankingPDS", item))
            {
                _navigation.NavigateTo("./Home/Error");
            }

            await loader.Close();
        }
    }
    protected override async void OnInitialized()
    {
        try
        {
            RegistroFormularioDTO datoEnviar = new RegistroFormularioDTO();

            ranking = StoreService.RecuperarRankingPDS(datoEnviar);

            dataTiempoRevision = StoreService.ObtieneDiasRetrasoRevisionJefeComercial();


            login = new LoginDTO();
            EndPointStr = EndPoints.obtenerZonasPorGerencia;
            var result = await _httpClient.PostAsJsonAsync<ZonasPorSupervisorDTO>
               (EndPointStr, login);


        }
        catch (Exception ex)
        {
            ranking = new List<RankingCumplimientoPDSInfo>();
        }
    }
    

    private async Task VerRanking()
    {
        try
        {
            RegistroFormularioDTO datoEnviar = new RegistroFormularioDTO();
            EndPointObtieneRanking = EndPoints.obtenerRankingPDS;

            var result = await _httpClient.PostAsJsonAsync<RankingCumplimientoPDSInfo>
               (EndPointObtieneRanking, datoEnviar);

            _tableRankingPDS.Data = result.OrderByDescending(or=>or.grupo).ToArray();


            await modalRankingxPDS.NewModal();

        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message.ToString());
        }
    }

    private async Task VerRankingxGrupo(RankingCumplimientoPDSInfo datoGrupo)
    {
        try
        {
            if (int.Parse(datoGrupo.cantidadPDS) == 0)
                return;

            RankingCumplimientoPDSDTO datoConsultar = new RankingCumplimientoPDSDTO();
            datoConsultar.grupo = datoGrupo.grupo;
            datoConsultar.cantidadPDS = "0";
            datoConsultar.codigoUsuario = await _session.GetItemAsync<string>("codigoUsuario"); 
            datoConsultar.tipoConsulta = "G";

            EndPointPDSPorRango = EndPoints.obtenerPDSPorRangoCumplimiento;

            var result = await _httpClient.PostAsJsonAsync<RankingPDSInfo>
                (EndPointPDSPorRango, datoConsultar);

            _tablePDS1.Data = result.OrderByDescending(or => or.cantidadFormularios).ToArray();

            await modalPdsRango.NewModal();

        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message.ToString());
        }
    }

    

}
