@page "/StoreCheck/Revision"

@using Blazored.LocalStorage
@using IntranetLoteriaNacional.Data
@using IntranetLoteriaNacional.Shared.ComponentModels
@using IntranetLoteriaNacional.Shared.Modals
@using IntranetLoteriaNacional.Shared.Constants
@using IntranetLoteriaNacional.Validate
@using LoteriaNacionalDominio
@using static LoteriaNacionalDominio.StoreCheckDTO
@using static LoteriaNacionalDominio.MantenimientoDTO
@using static LoteriaNacionalDominio.SeguridadDTO
@using C1.Chart
@using C1.Blazor.Chart



@inject ProjectHttpClient _httpClient
@inject ILocalStorageService _session
@inject NavigationManager _navigation
@inject SweetAlertService Swal
@inject StoreCheckService StoreService

<style>
    .column {
        width: 50%;
    }

    /* Clear floats after the columns */
    .row:after {
        content: "";
        display: table;
        clear: both;
    }
</style>

<article class="art">
    <h1 class="tituloPagina">Área de trabajo Supervisor</h1>
    <div>
        <div class="row" style="align-content:center">
            <p align="center" style="color: black">Pendientes de revisión</p>
        </div>
        <PhTable @ref="_table" TPost="LoginDTO" isSearcheable="false" TReturn="ZonasPorSupervisorDTO" Body="@login" EndPoint="@EndPointStr" isAgroup=true idTable="table_ZonasPorSupervisor">
            <PhTableColumnHeaders>
                <PhTableColumn Style="width:30%;" Value="Nombre Zona" IsHeader="true" />
                <PhTableColumn Style="width:50%;" Value="Nombre PDS" IsHeader="true" />
                <PhTableColumn Style="width:20%;" Value="Cuestionarios Pendientes" IsHeader="true" />
            </PhTableColumnHeaders>
            <PhTableColumnValues>
                <PhTableColumn Value="@context.nombreZona" Style="width:30%;text-align:center;vertical-align:middle;" />
                <PhTableColumn Value="@context.nombrePDS" Style="width:50%;" />
                <PhTableColumn Value="@Convert.ToString(context.CuestionariosPendientes)" Style="width:20%;" />
            </PhTableColumnValues>
            <PhTableActions>
                <PhButton Type="ButtonType.Primary" @onclick="@(() => VerCuestionarios(context))" Size="ButtonSize.Small" Text="Cuestionarios" />
            </PhTableActions>

        </PhTable>
        <div class="row">
            <div class="col-md-6 col-sm-12">
                <FlexChart Class="chart" ChartType="ChartType.Column" Stacking="Stacking.Stacked" SelectionMode= "C1.Chart.ChartSelectionMode.Point"
                           HeaderContent="Cuestionarios Revisados" HeaderStyle="font-size:15px"
                           LegendPosition="C1.Chart.Position.Bottom" LegendStyle="font-size:15px"
                           BindingX="nombrePDS" ItemsSource="@cuestionariosRevisadosPDSSupervisor" >
                    <SeriesCollection>
                        <Series Name="Cuestionarios Revisados" Binding="CuestionariosNovedades" />
                    </SeriesCollection>
                </FlexChart>
            </div>
            <div class="col-md-6 col-sm-12">
                <FlexChart Class="chart" ChartType="C1.Chart.ChartType.Funnel" BindingX="cantidadPDS" ItemsSource="dataRankingPDS"
                           HeaderContent="Ranking Cumplimiento PDS" HeaderStyle="font-size:15px">
                    <SeriesCollection>
                        <Series Binding="grupo"></Series>
                    </SeriesCollection>
                    <AxisCollection>
                        <Axis AxisType="C1.Chart.AxisType.Y" Position="C1.Chart.Position.None" />
                        <Axis AxisType="C1.Chart.AxisType.X" Position="C1.Chart.Position.None" />
                    </AxisCollection>
                    <Label>
                        <DataLabel Position="C1.Chart.LabelPosition.Center" Content="{grupo}% - PDS: {cantidadPDS}"></DataLabel>
                    </Label>
                </FlexChart>
            </div>
        </div>
        <PhNotification @ref="@modalNotification">
        </PhNotification>

        <PhModal @ref="modalCuestionarios">
            <Title>Cuestionarios Pendientes de Revisión</Title>
            <Body>
                <div class="form-group row" style="margin-bottom:2%;">
                    <label for="det" class="col-sm-2 col-form-label col-form-label-lg">PDS</label>
                    <div class="col-sm-10">
                        <input type="text" class="form-control form-control-lg" id="det" @bind-value="nombrePDS">
                    </div>
                </div>
                <PhTable @ref="_table1" TPost="RegistroFormularioDTO" isRefresh="true" TReturn="FormulariosporPOSDTO" Body="@pds" EndPoint="@EndPointCuestionarios"
                         SearchDefinition="@(new[]
                         {
                             "codigoFormulario",
                             "fechaRegistro"
                         })">
                    <PhTableColumnHeaders>
                        <PhTableColumn Style="width:20%;" Value="Código de Cuestionario" IsHeader="true" />
                        <PhTableColumn Style="width:20%;" Value="Fecha Registro" IsHeader="true" />
                    </PhTableColumnHeaders>
                    <PhTableColumnValues>
                        <PhTableColumn Value="@Convert.ToString(context.codigoFormulario)" Style="width:20%;" />
                        <PhTableColumn Value="@context.fechaRegistro?.ToString()" Style="width:20%;" />
                    </PhTableColumnValues>
                    <PhTableActions>
                        <PhButton Type="ButtonType.Primary" OnClick="@(() => VerFormulario(context))" Size="ButtonSize.Small" Text="Ver Cuestionario" />
                    </PhTableActions>
                </PhTable>

                <PhModal @ref="modalCuestionario" maxwidth="100%">
                    <Title>Cuestionario Ingresado</Title>
                    <Body>
                        <div class="form-group row" style="margin-bottom:2%;">
                            <label for="det" class="col-sm-2 col-form-label col-form-label-lg">Cuestionario #</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control form-control-lg" id="det" @bind-value="codigoFormulario">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-9" style="left:auto">
                                <label for="det" class="col-sm-9 col-form-label col-form-label-lg" style="color:var(--ph-skyblue)">Pregunta</label>
                            </div>
                            <div class="col-sm-1" style="text-align:center">
                                <label for="det" class="col-sm-1 col-form-label col-form-label-lg" style="color:var(--ph-skyblue)">Si</label>
                            </div>
                            <div class="col-sm-1" style="text-align:center">
                                <label for="det" class="col-sm-1 col-form-label col-form-label-lg" style="color:var(--ph-skyblue)">No</label>
                            </div>
                        </div>
                        <ul class="nav flex-column">
                            @if (DataSeccion != null)
                            {
                                int count = 1;
                                @foreach (var seccion in DataSeccion)
                                {
                                    <li class="nav-item">
                                        <NavLink class="nav-link">
                                            <a class="nav-link" aria-current="page" style="color:var(--ph-skyblue)">@seccion.nombreSeccion</a>
                                            @{
                                                string nombrePanel = "nav" + seccion.nombreSeccion;
                                            }
                                            <table class="table">
                                                <tbody>
                                                    @if (preguntasList != null)
                                                    {
                                                        foreach (var pregunta in preguntasList.Where(pl => pl.codigoSeccion == seccion.codigoSeccion))
                                                        {
                                                            string nombreRadioButton = "radio" + count.ToString();
                                                            <tr>
                                                                <td scope="row" width="40%">@pregunta.descripcionPregunta.Trim()</td>
                                                                <td width="4%">
                                                                    <input type="radio" name="@nombreRadioButton" @onchange="@(() => pregunta.respuestaSupervisor = true)" />
                                                                </td>
                                                                <td width="6%">
                                                                    <input type="radio" name="@nombreRadioButton" @onchange="@(() => pregunta.respuestaSupervisor = false)" />
                                                                </td>
                                                            </tr>
                                                            count++;
                                                        }
                                                    }
                                                </tbody>
                                            </table>
                                        </NavLink>
                                    </li>
                                }
                            }
                        </ul>
                    </Body>
                    <Footer>
                        <PhButton Type="ButtonType.Success" @onclick="sendData" Size="ButtonSize.Small" Text="Guardar" isConfirmation="true" />
                        <PhButton Type="ButtonType.Danger" @onclick="() => modalCuestionario.CloseModal()" Size="ButtonSize.Small" Text="Cerrar" />
                    </Footer>
                </PhModal>

            </Body>
            <Footer>
                <PhButton Type="ButtonType.Danger" @onclick="() => modalCuestionarios.CloseModal()" Size="ButtonSize.Small" Text="Cerrar" />
            </Footer>
        </PhModal>

    </div>

    <div>
        <PhConfirmacion @ref="modalConfirmacion" onClickCancel="CancelConfirm" title="Confirmación" content="¿Está seguro de guardar el cuestionario?" OnClickExec="sendData">
        </PhConfirmacion>
    </div>
    <Loading @ref="loader"></Loading>
</article>

@code {
    Loading loader { get; set; } = new();
    private PhTable<LoginDTO, ZonasPorSupervisorDTO>? _table = new();
    private PhTable<RegistroFormularioDTO, FormulariosporPOSDTO>? _table1 = new();
    private PhConfirmacion modalConfirmacion { get; set; } = new();
    private PhNotification modalNotification { get; set; } = new();
    private string EndPointStr { get; set; } = null!;
    private string EndPointCuestionarios { get; set; } = null!;
    private string EndPointFormularioIngresado { get; set; } = null!;
    private string EndPointNovedades { get; set; } = null!;
    LoginDTO login { get; set; } = null!;
    RegistroFormularioDTO pds { get; set; } = null!;
    private PhModal? modalCuestionarios { get; set; } = new();
    private PhModal? modalCuestionario { get; set; } = new();
    private int codigoPDS { get; set; } = 0;
    private string nombrePDS { get; set; } = string.Empty;
    private long codigoFormulario { get; set; } = 0;
    IEnumerable<SeccionesDTO> DataSeccion;
    public IEnumerable<RegistroFormularioDTO> preguntasList;
    public IEnumerable<NovedadesDTO> novedadesList;
    string mensajeTransaccion = string.Empty;
    string iconoMostrar = string.Empty;
    NovedadesDTO novedades = new NovedadesDTO();
    NovedadesDTO dtSelectnovedad = null;
    public List<ZonasPorSupervisorDTO>? cuestionariosPendientesZona;
    List<ResumenGerencialZonasDTO>? cuestionariosRevisadosPDSSupervisor;
    List<RankingCumplimientoPDSInfo> dataRankingPDS;

    protected override async void OnInitialized()
    {
        EndPointStr = EndPoints.obtieneZonasPorSupervisor;

        try
        {
            RegistroFormularioDTO datoEnviar = new RegistroFormularioDTO();
            datoEnviar.codigoSupervisor = "fmorla";
            login = new LoginDTO();
            login.UserName = "fmorla";
            login.Password = string.Empty;

            //await _session.GetItemAsync<string>("codigoUsuario");
            // var result = await _httpClient.PostAsJsonAsync<ZonasPorSupervisorDTO>
            //    (EndPointStr, login);

            // _table.Data = result;

            cuestionariosPendientesZona = StoreService.RecuperarDataCuestionariosPendientesZonas(login);

            cuestionariosRevisadosPDSSupervisor = StoreService.ObtieneFormulariosRevisadosPDSPorSupervisor(datoEnviar);

            dataRankingPDS = StoreService.RecuperarRankingPDSSupervisor(datoEnviar);


            novedadesList = await _httpClient.PostAsJsonAsync<NovedadesDTO>(EndPoints.obtenerNovedades, novedades);
            if (novedadesList == null)
            {
                mensajeTransaccion = "No existen novedades registradas, por favor comuníquese con el administrador";
                await loader.Close();
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        ConfirmButtonColor = "var(--ph-skyblue)",
                        Title = "Intranet Lotería Nacional",
                        Text = mensajeTransaccion,
                        Icon = "info"
                    });
            }
        }
        catch (Exception ex)
        {

            login = new LoginDTO();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var item = await _session.GetItemAsync<MenuDTO[]>("_userMenu");
            Validate validate = new Validate();
            if (!validate.isValid("./StoreCheck/Revision", item))
            {
                _navigation.NavigateTo("./Home/Error");
            }

            await loader.Close();
        }
    }

    private async Task sendData()
    {
        await loader.Show();
        mensajeTransaccion = string.Empty;
        iconoMostrar = string.Empty;
        try
        {
            RegistroDTO listaEnviar = new RegistroDTO();

            List<RegistroFormularioDTO> registro = new List<RegistroFormularioDTO>();
            foreach (var item in preguntasList)
            {
                RegistroFormularioDTO datoEnviar = new RegistroFormularioDTO();
                if (item.respuestaSupervisor == null)
                    item.respuestaSupervisor = false;

                datoEnviar.codigoRegistro = item.codigoRegistro;
                datoEnviar.codigoFormulario = item.codigoFormulario;
                datoEnviar.codigoComisionista = item.codigoComisionista;
                datoEnviar.codigoPDS = item.codigoPDS;
                datoEnviar.codigoSeccion = item.codigoSeccion;
                datoEnviar.codigoPregunta = item.codigoPregunta;
                datoEnviar.respuestaSupervisor = item.respuestaSupervisor;
                datoEnviar.codigoSupervisor = "fmorla";//await _session.GetItemAsync<string>("codigoUsuario"); deber ir codigo numerico del supervisor
                                                       //datoEnviar.presentaNovedad = item.presentaNovedad;
                                                       //datoEnviar.codigoNovedad = item.codigoNovedad; //Aquí debo coger el código de novedad del combo
                datoEnviar.fechaRevisionSupervisor = DateTime.Now.ToString("yyyy-MM-dd");
                datoEnviar.usuarioModificacion = await _session.GetItemAsync<string>("codigoUsuario");
                datoEnviar.equipoModificacion = "192.168.3.216";//await _session.GetItemAsync<string>("ip");
                datoEnviar.fechaModificacion = System.Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-dd h:mm tt"));

                registro.Add(datoEnviar);
            }

            listaEnviar.registro = registro;

            var postRequest = new HttpRequestMessage(HttpMethod.Post, EndPoints.revisarCuestionarioSupervisor)
                {
                    Content = JsonContent.Create(listaEnviar)
                };

            var postResponse = await _httpClient.SendAsync(postRequest);
            if (postResponse.IsSuccessStatusCode)
            {
                var returnType = await postResponse.Content.ReadFromJsonAsync<RespuestaDTO>()!;
                if (returnType.CodigoError == 0)
                {
                    mensajeTransaccion = returnType.MensajeError;
                    iconoMostrar = "success";
                }
                else
                {
                    mensajeTransaccion = returnType.MensajeError;
                    iconoMostrar = "error";
                }
                await modalCuestionario.CloseModal();
                await loader.Close();
            }
            else
            {
                //await modalNotification.ErrorModal("Error de servicio");
                mensajeTransaccion = "Error de servicio";
                iconoMostrar = "error";
                await loader.Close();
            }

            await Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "var(--ph-skyblue)",
                    Title = "Intranet Lotería Nacional",
                    Text = mensajeTransaccion,
                    Icon = iconoMostrar
                });


        }
        catch (HttpRequestException e)
        {
            //await modalNotification.ErrorModal(e.Message.ToString());
            await loader.Close();
            await Swal.FireAsync(new SweetAlertOptions
                {
                    ConfirmButtonColor = "var(--ph-skyblue)",
                    Title = "Intranet Lotería Nacional",
                    Text = e.Message.ToString(),
                    Icon = "error"
                });
        }
    }

    private async Task VerCuestionarios(ZonasPorSupervisorDTO dato)
    {
        try
        {
            codigoPDS = int.Parse(dato.codigoPDS.ToString());
            nombrePDS = dato.nombrePDS;
            EndPointCuestionarios = EndPoints.consultarFormulariosporPOS;

            var result = await _httpClient.PostAsJsonAsync<FormulariosporPOSDTO>
               (EndPointCuestionarios, dato);

            _table1.Data = result;
            await modalCuestionarios.NewModal();
        }
        catch (Exception ex)
        {

            dato = new ZonasPorSupervisorDTO();
        }
    }

    private async Task CancelConfirm()
    {
        //this.OnInitialized();
        StateHasChanged();
    }

    private async Task VerFormulario(FormulariosporPOSDTO formulario)
    {
        try
        {
            codigoFormulario = long.Parse(formulario.codigoFormulario.ToString());
            EndPointFormularioIngresado = EndPoints.consultarFormularioIngresado;

            var result = await _httpClient.PostAsJsonAsync<RegistroFormularioDTO>
               (EndPointFormularioIngresado, formulario);

            //_table2.Data = result;
            List<SeccionesDTO> listaSecciones = new List<SeccionesDTO>();
            foreach (var itemSeccion in result.Select(m => new { m.codigoSeccion, m.nombreSeccion }).Distinct())
            {
                SeccionesDTO datoSeccion = new SeccionesDTO();
                datoSeccion.codigoSeccion = itemSeccion.codigoSeccion;
                datoSeccion.nombreSeccion = itemSeccion.nombreSeccion;
                listaSecciones.Add(datoSeccion);
            }
            DataSeccion = (IEnumerable<SeccionesDTO>)listaSecciones;

            preguntasList = result;

            await modalCuestionario.NewModal();
        }
        catch (Exception ex)
        {

            formulario = new FormulariosporPOSDTO();
        }
    }

    private async void HandleSelectionChanged()
    {
        try
        {
            string prueba = "HOLA";

            // codigoPDS = Convert.ToInt32(((LoteriaNacionalDominio.StoreCheckDTO.ZonasPorSupervisorDTO[])args.Point.DataItems)[0].codigoPDS);
            // nombrePDS = ((LoteriaNacionalDominio.StoreCheckDTO.ZonasPorSupervisorDTO[])args.Point.DataItems)[0].nombrePDS;
            // ZonasPorSupervisorDTO dato = new ZonasPorSupervisorDTO();
            // dato.codigoPDS = codigoPDS;
            // dato.nombrePDS = nombrePDS;


            // EndPointCuestionarios = EndPoints.consultarFormulariosporPOS;

            // var result = await _httpClient.PostAsJsonAsync<FormulariosporPOSDTO>
            //    (EndPointCuestionarios, dato);

            // _table1.Data = result;
            // await modalCuestionarios.NewModal();
            
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message.ToString());
        }
    }

    
}
