@using Blazored.LocalStorage
@using static LoteriaNacionalDominio.SeguridadDTO

@inject ILocalStorageService _session

<div class="top-row ps-3 navbar navbar-dark" style="background-color:white">
    <div class="container-fluid" style="background-color:white">
        <div style="padding: 20px; background-color: white;">
            <img style="width: 150px" height="40px" src="./images/loterialogo.png" />
        </div>
        <b/>
        <b />
        <b />
        <b />
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu" style="background-color:white">
            <span class="navbar-toggler-icon" style="background-color:white"></span>
        </button>
    </div>
</div>
 
<div class="@NavMenuCssClass" @onclick="ToggleNavMenu" style="background-color:white">
    @if(menuList==null)
    {
        <p><em>Cargando....</em></p>
    }
    else
    {
        <ul class="nav flex-column" style="background-color:white; color:var(--ph-skyblue)">
             
            @foreach(var funcion in funcionList)
            {
                <li class="nav-item px-3" style="color:var(--ph-skyblue)">
                    <NavLink class="nav-link" style="color: var(--ph-skyblue)" @onclick="()=>GetIsClicked(funcion)">
                        <span aria-hidden="true"></span>@funcion.nombreFuncion
                    </NavLink>
                </li>
                <ul class="nav flex-column" style="background-color:white; color:var(--ph-skyblue)">
                    @foreach (var transaccion in menuList.Where(t=>t.codigoFuncion.Equals(funcion.codigoFuncion)).Select(t=> new {t.codigoTransaccion, t.nombreTransaccion, t.urlPagina}).ToList())
                    {
                        @if (expanSubNav && funcion.codigoFuncion == clickedMenu)
                        {
                            <li class="nav-item px-3">
                                <NavLink class="nav-link" style="color: var(--ph-skyblue);" href="@transaccion.urlPagina">
                                    <span aria-hidden="true"></span>@transaccion.nombreTransaccion
                                </NavLink>
                            </li>
                        }
                        
                    }
                </ul>
            }

        </ul>
    }
</div>

@code {
    private bool collapseNavMenu = true;
    private bool expanSubNav;
    public IEnumerable<MenuDTO> menuList;
    public List<FuncionDTO> funcionList;
    private int clickedMenu = 0;
    private bool hasPageName = true;
    private int prevClickedMenu = 0;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        if(hasPageName)
        {
            collapseNavMenu = !collapseNavMenu;
        }
    }

    public void GetIsClicked(FuncionDTO funcion)
    {
        clickedMenu = funcion.codigoFuncion;
        if (prevClickedMenu != clickedMenu)
        {
            expanSubNav = false;
            if (funcion.nombreFuncion != "")
            {
                hasPageName = true;
            }
            else
            {
                expanSubNav = !expanSubNav;
                hasPageName = false;
            }
        }
        else
        {
            expanSubNav = !expanSubNav;

        }
        prevClickedMenu = clickedMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        menuList = await _session.GetItemAsync<MenuDTO[]>("_userMenu");
        funcionList = new List<FuncionDTO>();
        foreach (var itemFuncion in menuList.Select(f => new { f.codigoFuncion, f.nombreFuncion }).Distinct().ToList())
        {
            FuncionDTO itemNuevo = new FuncionDTO();
            itemNuevo.codigoFuncion = itemFuncion.codigoFuncion;
            itemNuevo.nombreFuncion = itemFuncion.nombreFuncion;
            funcionList.Add(itemNuevo);
        }
        
    }
}
